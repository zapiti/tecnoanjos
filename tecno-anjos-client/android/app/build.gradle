def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')

if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {



    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }
    splits {
        abi {
            reset()
            enable true
            universalApk true  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a"
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).

        applicationId "br.com.awscode.tecnoanjos.cliente"

        minSdkVersion 24
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        manifestPlaceholders = [mapsApiKey: "AIzaSyB_5vTLi7TI9jNE2vWAoZE_jl0GL6NLhNI"]
        multiDexEnabled true
    }
    signingConfigs {
        prod {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']

//            keyAlias System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS")
//            keyPassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
//            storeFile file(System.getenv("HOME") + "/keystores/prod.jks")
//            storePassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD")
        }
        homolog {
//            keyAlias System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS")
//            keyPassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
//            storeFile file(System.getenv("HOME") + "/keystores/prod.jks")
//            storePassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD")
            keyAlias keystoreProperties['keyAliasHomolog']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
        dev {
//            keyAlias System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS")
//            keyPassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
//            storeFile file(System.getenv("HOME") + "/keystores/prod.jks")
//            storePassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD")
            keyAlias keystoreProperties['keyAliasDev']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            shrinkResources true
        }
    }

    flavorDimensions "flavor-type"

    productFlavors {
        dev {
            dimension "flavor-type"
            applicationId "br.com.awscode.tecnoanjos.cliente.dev"
            resValue "string", "app_name", "Tecno-Dev"
            signingConfig signingConfigs.dev
            versionCode 194
            versionName "2.9.4"
//            minifyEnabled true
//            useProguard true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        homolog {
            dimension "flavor-type"
            applicationId "br.com.awscode.tecnoanjos.cliente.homolog"
            resValue "string", "app_name", "Tecno-Homolog"
            signingConfig signingConfigs.homolog
            versionCode 170
            versionName "2.7.0"
//            minifyEnabled true
//            useProguard true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        prod {
            dimension "flavor-type"
            applicationId "br.com.awscode.tecnoanjos.cliente"
            resValue "string", "app_name", "Tecnoanjos"
            signingConfig signingConfigs.prod
//            minifyEnabled true
//            useProguard true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation "org.robolectric:robolectric:4.3.1"
    testImplementation 'org.mockito:mockito-core:3.2.4'
    testImplementation 'com.google.android.gms:play-services-maps:17.0.0'
}
apply plugin: 'com.google.gms.google-services'